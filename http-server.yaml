## An HTTP-based API for sentiment analysis of financial news that uses PyTorch
## to classify POST-ed content. The results may optionally be written to one of
## three different Redpanda topics, based on the resulting label.

input:
  http_server:
    address: ${HOST:127.0.0.1}:${PORT:8080}
    path: /sentiment

cache_resources:
  - label: memory_cache
    memory:
      default_ttl: 5m
      compaction_interval: 60s

pipeline:
  processors:
    # First, we try looking up a previously computed score in our cache.
    - cache:
        resource: memory_cache
        operator: get
        key: '${!content().string().hash("sha1").encode("hex")}'
    - branch:
        request_map: |
          # on error, we had a cache miss.
          root = if errored() { content() } else { deleted() }
        processors:
          - resource: python
          - mutation: |
              # compute a sha1 hash as a key
              root.metadata.sha1 = this.text.hash("sha1").encode("hex")
          - cache:
              resource: memory_cache
              operator: set
              key: '${!this.metadata.sha1}'
              value: '${!content()}'
        result_map: |
          root = this
          root.metadata.cache_hit = false
    - mutation: |
        root.metadata.cache_hit = this.metadata.cache_hit | true

output:
  resource: ${DEMO_OUTPUT_MODE:http}

output_resources:
  # Send the HTTP response back to the client.
  - label: http
    sync_response: {}

  # Send the data to Redpanda.
  - label: redpanda
    kafka_franz:
      seed_brokers:
        - ${REDPANDA_BROKERS:localhost:9092}
      topic: "${!this.label | unknown}-${REDPANDA_TOPIC:news}"
      key: ${!this.metadata.sha1}
      batching:
        count: 1000
        period: 5s
      tls:
        enabled: ${REDPANDA_TLS:false}
      sasl:
        - mechanism: ${REDPANDA_SASL_MECHANISM:none}
          username: ${REDPANDA_SASL_USERNAME:}
          password: ${REDPANDA_SASL_PASSWORD:}

  # Do both: send to Redpanda and reply to the client.
  - label: both
    broker:
      pattern: fan_out
      outputs:
        - resource: http
        - resource: redpanda


http:
  enabled: false
logger:
  level: INFO

